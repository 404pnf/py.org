# ruby下的ngram

项目：
<https://github.com/pecbali/ngramdistance-ffi>

> * distance
> 
>     require 'ngramdistance'
>     NGramDistance.distance("string1", "string1") # returns 1.0
>     NGramDistance.distance("university", "univearsitty",3) # returns 0.750000
> 
> * token_sort_distance
>     
> 	require 'ngramdistance'
>     NGramDistance.token_sort_distance("hello bello", "bello hello") # returns 1.0
> 
> The token sort approach involves tokenizing the string in question, sorting the tokens alphabetically, and then joining them back into a string. For example:
> 
>     "new york mets vs atlanta braves"   →→  "atlanta braves mets new vs york" 
> 
> We then compare the transformed strings with a simple distance(). That nicely solves our ordering problem, as our helper function below indicates:
> 
>     NGramDistance.token_sort_distance("New York Mets vs Atlanta Braves", "Atlanta Braves vs New York Mets") ⇒ 1.0
> 
> method signature is token_sort_distance(source,target,regex=' ',ngram=3,mode=PROPOSITIONAL) the arguments are same as distance function but with extra argument regex, character or string to split source and target


2013-06-21