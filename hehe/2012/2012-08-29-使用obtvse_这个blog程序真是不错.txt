# 使用obtvse 这个blog程序真是不错

界面清新简单。支持heroku部署。rails + sqlite。虽然不喜欢它使用了数据库。但部署起来很简单的。而且用户时浏览器登录写文章。

备份heroku上的sqlite数据库
https://devcenter.heroku.com/articles/taps
安装 gem install tap
在本地该app目录运行  heroku db:pull
如果是更新本地数据库到服务器 heroku db:push

代码库：
https://github.com/cobyism/obtvse

如何批量导入文章。代码库中有个导入wp的可以参考：
https://github.com/NateW/obtvse/blob/239bc38c2f71f045841d14fe91ff4fc05f5bfb4d/lib/tasks/migrate_wordpress.rake

它是数据。修改一下就可一导入rss或者csv了。应该。下周搞定它。

       # -*- coding:utf-8 -*-
       # Usage rake wordpress:migrate_wordpress[:src, :dst]
       # You will need gem "mysql" in your Gemfile
       
       namespace :wordpress do
           task :migrate_wordpress, [:src, :dst] => :environment do |cmd, args|
               args.with_defaults(:src => "wordpress", :dst => "development")
               config = Rails.configuration.database_configuration
               src_db = config[args[:src]]
               dst_db = config[args[:dst]]
       
               conn = ActiveRecord::Base.establish_connection src_db
               posts = conn.connection.execute "SELECT * FROM wp_posts where post_status='draft' or post_status='publish'"
       
               conn = ActiveRecord::Base.establish_connection dst_db
       
               posts.each do |post|
                   title = post[5].force_encoding 'utf-8'
                   content = post[4].force_encoding 'utf-8'
                   created_at = post[2]
                   updated_at = post[14]
                   draft = post[7]
       
                   if draft.end_with? "draft"
                       draft_flag = true
                   elsif draft.end_with? "publish"
                       draft_flag = false
                   end
       
                   p = Post.create! :title => title, :content => content, :slug => Post.acts_as_url(:title, :url_attribute => :slug),
                                    :created_at => created_at, :updated_at => updated_at, :draft => draft_flag
               end
           end
       end

当创建一篇文章的时候，看log记录
log/development.log:  Parameters: {"utf8"=>"✓", "authenticity_token"=>"knFM9iFIeJfpvNssi9Ixw0qWWUv7XlwMDFMDKLIe6fw=", "post"=>{"title"=>"lost a post?", "content"=>"could it be?", "slug"=>"", "url"=>"", "draft"=>"0"}}
log/development.log:  SQL (4.0ms)  INSERT INTO "posts" ("aside", "content", "created_at", "draft", "parent", "slug", "title", "updated_at", "url") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["aside", false], ["content", "could it be?"], ["created_at", Fri, 15 Jun 2012 05:12:58 UTC +00:00], ["draft", false], ["parent", nil], ["slug", "lost-a-post"], ["title", "lost a post?"], ["updated_at", Fri, 15 Jun 2012 05:12:58 UTC +00:00], ["url", ""]]

这里应该看出如何批量导入文章。


